// -----------------------------------------------------------------------------
// Use Case: Monitoring Azure Sentinel API Poller Health
// -----------------------------------------------------------------------------
// https://github.com/dstreefkerk/kql
//
// Purpose:
// This KQL query is designed to monitor the operational health of API-based 
// data connectors using the "RestApiPoller" type within Microsoft Sentinel. 
// It provides visibility into poller execution status, data ingestion volumes, 
// and any associated failures or warnings.
//
// Problem Statement:
// API-based data ingestion in Sentinel can silently fail or degrade in 
// performance, leading to gaps in security visibility. This query helps SOC 
// teams proactively identify and triage poller-related issues.
//
// Key Features:
// - Filters for API Polling connectors (RestApiPoller)
// - Extracts operational metadata from ExtendedProperties
// - Calculates data fetch duration for performance insights
// - Derives health status (Healthy, Warning, Failure)
// - Extracts first failure type, code, and message for diagnostics
// - Sorts by most recent polling events
//
// Usage Context:
// Run this query within Microsoft Sentinel to populate dashboards or drive 
// alerts for connector health. Integrate with workbooks or scheduled analytics 
// for proactive monitoring.
//
// Requirements:
// - SentinelHealth table must be enabled and collecting telemetry
// - Connectors must be configured with ExtendedProperties logging
//
// Last Updated: 2025-04-08
// -----------------------------------------------------------------------------
SentinelHealth
| where Type == "SentinelHealth"
| where SentinelResourceKind == "ApiPolling"
| where isnotempty(ExtendedProperties)
// Filter for RestApiPoller specifically
| extend ConnectorDataType = tostring(ExtendedProperties.ConnectorDataType)
| where ConnectorDataType == "RestApiPoller"
// Extract additional details from ExtendedProperties
| extend 
    StartTime = todatetime(ExtendedProperties.StartTime),
    EndTime = todatetime(ExtendedProperties.EndTime),
    TotalRecordCount = toint(ExtendedProperties.TotalRecordCount),
    HasFailures = isnotempty(ExtendedProperties.FailureSummary),
    HasWarnings = isnotempty(ExtendedProperties.WarningCount) and toint(ExtendedProperties.WarningCount) > 0,
    FailureSummary = ExtendedProperties.FailureSummary,
    WarningDetails = ExtendedProperties.WarningDetails
// Add a connector name that strips out the "ApiPolling-" prefix for better readability
| extend ConnectorName = replace_regex(SentinelResourceName, @"^ApiPolling-", "")
// Add duration calculation for performance monitoring
| extend FetchDurationMinutes = datetime_diff('minute', EndTime, StartTime)
// Add health status classification for better filtering
| extend HealthStatus = case(
    Status == "Success", "Healthy",
    Status == "Warning" or HasWarnings, "Warning",
    HasFailures, "Failure",
    "Unknown"
)
// Add failure type classification for analytics
| extend FailureType = iif(
    HasFailures and array_length(FailureSummary) > 0,
    tostring(FailureSummary[0].HealthResultType),
    ""
)
// Add error code extraction for analytics
| extend ErrorCode = iif(
    HasFailures and array_length(FailureSummary) > 0,
    tostring(FailureSummary[0].StatusCode),
    ""
)
// Add error message for details
| extend ErrorMessage = iif(
    HasFailures and array_length(FailureSummary) > 0,
    tostring(FailureSummary[0].StatusMessage),
    ""
)
// Sort by most recent first
| sort by TimeGenerated desc
// Project final columns in a logical order
| project
    TimeGenerated,
    ConnectorName,
    OperationName,
    HealthStatus,
    Status,
    TotalRecordCount,
    FetchDurationMinutes,
    FailureType,
    ErrorCode,
    ErrorMessage,
    StartTime,
    EndTime,
    SentinelResourceType,
    SentinelResourceKind,
    ExtendedProperties